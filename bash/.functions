#!/bin/bash


mkcd() {
    mkdir -p "$1"
    cd "$1" || return
 }

cdls() {
    cd "$1" || return
    ls
}

md5check () {
    md5sum "$1" | grep "$2"
}

sha256check () {
    sha256sum "$1" | grep "$2"
}

histg () {
    history | grep -v "histg" | grep "$1"
}

extract() {
    if [ -f "$1" ] ; then
      case $1 in
        *.tar.bz2)   tar xjf "$1"     ;;
        *.tar.gz)    tar xzf "$1"     ;;
        *.bz2)       bunzip2 "$1"     ;;
        *.rar)       unrar e "$1"     ;;
        *.gz)        gunzip "$1"      ;;
        *.tar)       tar xf "$1"      ;;
        *.tbz2)      tar xjf "$1"     ;;
        *.tgz)       tar xzf "$1"     ;;
        *.zip)       unzip "$1"       ;;
        *.Z)         uncompress "$1"  ;;
        *.7z)        7z x "$1"        ;;
        *)     echo "$1 cannot be extracted via extract()" ;;
         esac
     else
         echo "$1 is not a valid file"
     fi
}

#   List all contents of current directory sorted by size
sbsall() {
        du -b --max-depth 1 | \
        sort -nr | \
        perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

#   List non-hidden directories of current directory sorted by size
sbs() { du -hsx ./* | sort -rh; }

up() {
    times=$1
    while [ "$times" -gt "0" ]; do
        cd ..
        # shellcheck disable=SC2004
        times=$(($times-1))
    done
}

# Make a temporary directory and enter it
mktmpcd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

#   Enter a pre-existing tmp folder or create one
tmpcd() {
    shopt -s nullglob
    local tmps=( /tmp/tmp.* )
    #   If no tmp folders found $tmps will consist of pattern
    if [ "${#tmps[@]}" -eq 0 ]; then
        mktmpcd "$@"
    else
        cd "${tmps[0]}" || return
    fi
}

# Compare original and gzipped file size
gz() {
	local origsize
	origsize=$(wc -c < "$1")
	local gzipsize
	gzipsize=$(gzip -c "$1" | wc -c)
	local ratio
	ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\\n" "$gzipsize" "$ratio"
}

# check if uri is up
isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
        return 1
	fi
}

# define word
def() {
    /usr/bin/firefox --new-tab -search "define $1"
}

# word synonym
syn() {
    /usr/bin/firefox --new-tab -search "synonym $1"
}

#   Create backup file
bak() { cp "$1"{,.bak};}

#   Crypto
shred_current_directory() {
    echo "You will IRREVERSIBLY shred the following files:"
    find . ! -path .
    read -p "Are you sure? (y/n): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        echo "shredding..."
        find . -type f -exec shred {} -n 1 -z \;
        echo "completed shredding."
    fi
}

#   Print readable $PATH
path() ( IFS=: ; printf '%s\n' "$PATH" ; )

launch_ssh_agent() {
    eval "$(ssh-agent -s)"
    ssh-add
}
